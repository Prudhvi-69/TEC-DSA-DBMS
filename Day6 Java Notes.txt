Good Morninggggggg.................














def calculate(a,b,c):
	if c == "+":
		if b==0:
			print(a) return 
		calculate(a+1,b-1,c)
	elif c == "-":
		if b==0:
			print(a) return	
		calculate(a-1,b-1,c)
	elif c == "*":
		if b==1:
			print(a)  return
		calculate(a+a,b-1,c)
	elif c == "%":
		if a<b || a==0:   // 4,2  , 4-2,2, 4-2,2, 0-2,2
			print(a)
			return
		calculuate(a-b,b,c)
	elif c=="/"   
		if a<b || a==0:
			return 0
		return 1+calculate(a-b,b,c)  
						//  5,2, 1+(5-2,2,"/"), (1+1+0) = 2


Bi   nary : Atmost 2 nodes for every node in the Tree
Ter nary : Atmost 3 nodes for every node in the Tree
N    nary : Atmost N nodes for every node in the Tree



Binary : Atmost 2 nodes for every node in the Tree

Root : A node which is going to be our entry point into the Tree.
			** Parent of all nodes in the Tree.

Child Node : Any node which is derived from a node, it is known as Child Node.
Parent : Any node which is having child nodes, is known as Parent Node.

** Data at every node in a Binary Tree can be in any order (No need of Root mid value, left child lowest, right child highest).

** If you take the concept of DLL, and implement by changing pointer's name from next and previous to right and left, you can call it, a Binary Tree. 

** If there is any Node, which is not containing any children below it, we're gonna call it, Leaf Node.

** If any nodes share same parent, you call them, Sibling Nodes.

** A part of tree, which is independently looking like a Tree, you call it, a Subtree.

** Every node in the Tree, is always linked to any one of the Nodes in the Tree.

** Accessing of values in the Tree differs from Linear Data Structures.

** There are multiple ways of accessing elements in a Tree.
	1. Preorder 
	2. Inorder
	3. Postorder
	4. Level Order
	5. ZigZag Order

** Degree : Max number of child nodes available under this Node, is the degree of this Node.
** Degree of Root : Max number of child nodes at any point in the Tree.

** Depth of a Node : Number of Edges, connected in the path of this Node from the root node, is the Depth of this Node.
** Depth of Root will be 0 all the time.

** Height of a Node : From this Node, till the farthest leaf node connected to this Node.
** Height of Leaf nodes will always be 0.























4 2 1 -1 0 5 11 8 6 





class Node
{
	int data;
	Node left;
	Node right;
	Node(int data)	
	{
		this.data=data;
		this.left = null;
		this.right=null;
	}
}



class BST
{
	public Node insert(Node root, int v)
	{
		if( root == null) 
			root = return new Node(v);
		else if(v < root.data)
			insert(root.left, v);
		else if(v > root.data)
			insert(root.right, v);
		return root;
	}
	public void preorder(Node root)
	{
		if (root != null)
		{
			SOP(root.data + " ");
			preorder(root.left);		
			preorder(root.right);
		}
	}
	public void postorder(Node root)
	{
		if (root != null)
		{
			postorder(root.left);		
			postorder(root.right);
			SOP(root.data + " ");
		}
	}
	public void inorder(Node root)
	{
		if (root != null)
		{
			inorder(root.left);		
			SOP(root.data + " ");
			inorder(root.right);
		}
	}
}
psvm()
{
	BST tree = new BST();
	Node root = null;
	root = tree.insert(root,69);
	root = tree.insert(root,106);
	tree.preorder(root);
}






// 

public int maxDepth(Node root)  
{
	if( root == null)
		return 0;
	int leftDepth = maxDepth(root.left) //  2, 
	int rightDepth = maxDepth(root.right) // 4, 

	return 1+(Math.max(leftDepth,rightDepth));
}




4 3 100
10 1 1 1
1 2
1 3
3 4
3

W = (W + U + abs(V,W)) % M
   =  (100 + 10 + 99 )  % M 
15






























