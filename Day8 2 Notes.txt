0 --------- 1 ------------ 2
|					_	/						|
|				/								|
\___3--------4----------/

4 - 3 : 1
4 - 2 : 1
4 - 1 : 2
4 - 0 : 2

[ 2,2,1,1,0 ]
	0 1 2 3 4 

level = [0] * V
start = 4
visited[start] = True
queue.append(start)
def bfs():
	while queue:
	node = queue.popleft()
	for neighbour in list[ node]:  #  Shows connected edges
		if not visited[neighbour]:  # Takes unvisited vertices
			level[neighbour] = level[node] + 1  #counting level
		
			visisted[neighbour] = True
			queue.append(neighbour)  //

list[]

for i in range(len(list)):
	if i == start:
		continue
	print(f" {start} - {i} : {list[i]} ")







0 : 1,3
1 : 2,4
2 : 0,1
3 : 4
4 : 0












Spanning Trees : It is a part of graph, created by connecting all vertices without revisiting any vertex or without forming ay cycle.

** You can create multiple spanning trees from a Graph.


Minimum Spanning Tree : 
























V or N : number of vertices

Total Spanning Trees : N ^ (N -2)  

** It should always be a Complete Graph.......

Number edges in a Spanning Tree : V-1 or N-1





Minimum Spanning Tree : Found in 2 ways.

1. Prim's      : Vertex based algorithm 
2. Kruskal's  : Edge based algorithm 

Dense Graph   : Vertex based
Sparse Graph  : Edge based

								   More number of edges : work with Vertices
Almost same number of Edges and Vertices : Work with Edges























1. Prim's      : Vertex based algorithm 

Steps :

1. Take a starting node/ vertex.
2. Find out all the connected edges from the starting Node.
3. Among all edges, find out the lowest cost/weight/value edge.
4. Check if it is forming a cycle or not....!!!
5. If it is not forming a cycle, traverse to that node.
6. Repeat from step 2, until you visit all nodes in the Graph.
7. If at any node, you form a cycle, ignore that edge and take the next lowest cost/weight/value edge.
8. Repeat same steps until all nodes are visited.


** Wherever your starting vertex may be from, the final Minimum cost should be same everytime for that vertex.








